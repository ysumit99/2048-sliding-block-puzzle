{"version":3,"sources":["js/helper.js","js/index.js"],"names":["deviceType","viewportWidth","window","innerWidth","device","colorCodes","value","color","backgroundColor","randomCellGenerator","min","max","Math","floor","random","onload","console","log","firstTile","secondTile","initialBlock","find","number","tileOne","document","querySelector","tileTwo","innerHTML","style","cssText"],"mappings":";AA6FA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,QAAA,WAAA,QAAA,gBAAA,EA7FA,IAAIA,EAAa,WAETC,IAAAA,EAAgBC,OAAOC,WACvBC,EAAS,GAWNA,OATHH,EAAgB,IAChBG,EAAS,SACa,KAAjBH,EACLG,EAAS,OACJH,GAAiB,IACtBG,EAAS,UACJH,EAAgB,OACrBG,EAAS,gBAENA,GA+EX,QAAA,WAAA,EA3EA,IAAMC,EAAa,CACf,CACIC,MAAO,EACPC,MAAO,GACPC,gBAAiB,6BAErB,CACIF,MAAO,EACPC,MAAO,UACPC,gBAAiB,WAGrB,CACIF,MAAO,EACPC,MAAO,UACPC,gBAAiB,WAGrB,CACIF,MAAO,EACPC,MAAO,UACPC,gBAAiB,WAGrB,CACIF,MAAO,GACPC,MAAO,UACPC,gBAAiB,WAGrB,CACIF,MAAO,GACPC,MAAO,UACPC,gBAAiB,WAGrB,CACIF,MAAO,GACPC,MAAO,UACPC,gBAAiB,WAGrB,CACIF,MAAO,IACPC,MAAO,UACPC,gBAAiB,WAGrB,CACIF,MAAO,IACPC,MAAO,OACPC,gBAAiB,OAGrB,CACIF,MAAO,IACPC,MAAO,OACPC,gBAAiB,OAGrB,CACIF,MAAO,KACPC,MAAO,OACPC,gBAAiB,OAGrB,CACIF,MAAO,KACPC,MAAO,OACPC,gBAAiB,QAMzB,QAAA,WAAA,EAAA,IAAIC,EAAsB,WAACC,IAAAA,EAAM,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAGC,EAAM,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,SAAWH,GAAOD,GAD7C,QAAA,oBAAA;;AC1FA,aAHA,IAAA,EAAA,QAAA,YAGAR,OAAOa,OAAS,WACZC,QAAQC,IAAI,eACZD,QAAQC,IAAIZ,EAAZ,YAAwB,EAAxB,EAAA,eAGIa,IAAAA,GAAY,EAAhB,EAAA,uBACIC,GAAa,EAAjB,EAAA,uBAIIA,GAAAA,IAAeD,EACRC,KAAAA,IAAeD,GAClBC,GAAa,EAAb,EAAA,uBAIRH,QAAQC,IAAIC,EAAWC,GACnBC,IAAAA,EAAef,EAAWgB,WAAAA,KAAK,SAAAC,GAAUA,OAAiB,IAAjBA,EAAOhB,QAChDiB,EAAUC,SAASC,cAAuBP,SAAAA,OAAAA,IAC1CQ,EAAUF,SAASC,cAAuBN,SAAAA,OAAAA,IAC9CI,EAAQI,UAAYP,EAAad,MACjCoB,EAAQC,UAAYP,EAAad,MAEjCiB,EAAQK,MAAMC,QAAmBT,SAAAA,OAAAA,EAAab,MAA0Ba,sBAAAA,OAAAA,EAAaZ,iBACrFkB,EAAQE,MAAMC,QAAmBT,SAAAA,OAAAA,EAAab,MAA0Ba,sBAAAA,OAAAA,EAAaZ,iBAGrFQ,QAAQC,IAAIG","file":"js.af12f518.js","sourceRoot":"..","sourcesContent":["let deviceType = () => {\n\n    let viewportWidth = window.innerWidth;\n    let device = \"\";\n\n    if (viewportWidth < 768)\n        device = \"mobile\";\n    else if (viewportWidth == 768)\n        device = \"ipad\";\n    else if (viewportWidth >= 992)\n        device = \"desktop\";\n    else if (viewportWidth > 1600)\n        device = \"largeDesktop\";\n\n    return device;\n\n};\n\nconst colorCodes = [\n    {\n        value: 0,\n        color: \"\",\n        backgroundColor: \"rgba(238, 228, 218, 0.35)\"\n    },\n    {\n        value: 2,\n        color: \"#bcac9f\",\n        backgroundColor: \"#eee4da\"\n\n    },\n    {\n        value: 4,\n        color: \"#bcac9f\",\n        backgroundColor: \"#efe1c9\"\n\n    },\n    {\n        value: 8,\n        color: \"#f8f6f1\",\n        backgroundColor: \"#f3b379\"\n\n    },\n    {\n        value: 16,\n        color: \"#f8f6f1\",\n        backgroundColor: \"#f69663\"\n\n    },\n    {\n        value: 32,\n        color: \"#f8f6f1\",\n        backgroundColor: \"#f67d5f\"\n\n    },\n    {\n        value: 64,\n        color: \"#f8f6f1\",\n        backgroundColor: \"#f75f3b\"\n\n    },\n    {\n        value: 128,\n        color: \"#f8f6f1\",\n        backgroundColor: \"#eccf72\"\n\n    },\n    {\n        value: 256,\n        color: \"blue\",\n        backgroundColor: \"red\"\n\n    },\n    {\n        value: 512,\n        color: \"blue\",\n        backgroundColor: \"red\"\n\n    },\n    {\n        value: 1024,\n        color: \"blue\",\n        backgroundColor: \"red\"\n\n    },\n    {\n        value: 2048,\n        color: \"blue\",\n        backgroundColor: \"red\"\n\n    }\n\n];\n\nlet randomCellGenerator = (min = 1, max = 16) => {\n    return Math.floor(Math.random() * max) + min;\n}\n\n\nexport { colorCodes, deviceType, randomCellGenerator };","import { colorCodes, deviceType, randomCellGenerator } from './helper';\n\n\nwindow.onload = function () {\n    console.log('page loaded');\n    console.log(colorCodes, deviceType());\n\n    //select first 2 tiles randomly\n    let firstTile = randomCellGenerator();\n    let secondTile = randomCellGenerator();\n\n    //console.log(firstTile, secondTile);\n\n    if (secondTile === firstTile) {\n        while (secondTile === firstTile)\n            secondTile = randomCellGenerator();\n\n    }\n\n    console.log(firstTile, secondTile);\n    let initialBlock = colorCodes.find(number => number.value === 2);\n    let tileOne = document.querySelector(`#cell-${firstTile}`);\n    let tileTwo = document.querySelector(`#cell-${secondTile}`);\n    tileOne.innerHTML = initialBlock.value;\n    tileTwo.innerHTML = initialBlock.value;\n\n    tileOne.style.cssText = `color:${initialBlock.color};background-color:${initialBlock.backgroundColor}`;\n    tileTwo.style.cssText = `color:${initialBlock.color};background-color:${initialBlock.backgroundColor}`;\n\n\n    console.log(initialBlock);\n\n};"]}